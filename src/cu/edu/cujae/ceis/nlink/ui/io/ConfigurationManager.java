/*
 * Copyright (C) 2022 Javier Marrero
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package cu.edu.cujae.ceis.nlink.ui.io;

import com.formdev.flatlaf.intellijthemes.materialthemeuilite.FlatGitHubDarkContrastIJTheme;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.Date;
import java.util.Properties;
import org.apache.commons.configuration2.Configuration;
import org.apache.commons.configuration2.PropertiesConfiguration;
import org.apache.commons.configuration2.ex.ConfigurationException;

/**
 *
 * @author Javier Marrero
 */
public final class ConfigurationManager implements ConfigurationKeys
{

    private static ConfigurationManager configurationManager = null;

    public static ConfigurationManager getConfigurationManager() throws IOException, FileNotFoundException,
                                                                        ConfigurationException
    {
        if (configurationManager == null)
        {
            configurationManager = new ConfigurationManager();
        }
        return configurationManager;
    }

    private boolean canSave;
    private final FileManager fileManager;
    private final Properties properties;
    private final PropertiesConfiguration configuration;

    public ConfigurationManager() throws IOException, FileNotFoundException, ConfigurationException
    {
        fileManager = FileManager.getFileManager();
        properties = new Properties();
        configuration = new PropertiesConfiguration();

        configuration.setHeader(
                "NLink-UI configuration file. This file is automatically generated, please do not modify it.");
        configuration.setFooter("generated on: " + new Date(System.currentTimeMillis()).toString());

        if (FileManager.CONFIGURATION_FILE.exists())
        {
            loadConfiguration();
        }
        else
        {
            loadDefaults();
            saveConfiguration();
        }
    }

    public boolean canSave()
    {
        return canSave;
    }

    public void loadConfiguration() throws FileNotFoundException, IOException, ConfigurationException
    {
        try ( BufferedReader bufferedReader = new BufferedReader(new FileReader(FileManager.CONFIGURATION_FILE)))
        {
            configuration.read(bufferedReader);
        }
    }

    public void loadDefaults()
    {
        configuration.setProperty(ETA_FACTOR, 0.75f);
        configuration.setProperty(HIDDEN_LAYER_NEURON_COUNT, 6);
        configuration.setProperty(LOG_FOLDER_PATH, FileManager.REPORT_DIRECTORY.toString());
        configuration.setProperty(LOOK_AND_FEEL, FlatGitHubDarkContrastIJTheme.class.getName());
        configuration.setProperty(SHOW_EXIT_CONFIRMATION, true);
        configuration.setProperty(TRAINING_DATA_BASE, "");
    }

    public void saveConfiguration() throws IOException, ConfigurationException
    {
        if (FileManager.CONFIGURATION_FILE.exists() == false)
        {
            FileManager.CONFIGURATION_FILE.createNewFile();
        }

        try ( BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(FileManager.CONFIGURATION_FILE)))
        {
            configuration.write(bufferedWriter);
        }
    }

    public void setCanSave(boolean value)
    {
        this.canSave = value;
    }

    public Configuration getConfigurationObject()
    {
        return configuration;
    }
}
